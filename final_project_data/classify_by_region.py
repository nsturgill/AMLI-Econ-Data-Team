# -*- coding: utf-8 -*-
"""Classify by region

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BiNXhuh9dwZkmddqRMcs8W-t9lr2Vw_4
"""

#dictionary for the states 

new_england = ('CT', 'ME', 'MA', 'NH', 'RI', 'VT')
mid_atlantic = ('NJ', 'NY', 'PA')
e_n_central = ('IL','IN','MI','OH', 'WI')
w_n_central = ('IA','KS','MN','MO','NE','ND','SD')
s_atlantic = ('DE', 'FL', 'GA', 'MD', 'NC', 'SC', 'VA', 'DC', 'WV')
e_s_central = ('AL', 'KY', 'MS', 'TN')
w_s_central = ('AR', 'LA', 'OK', 'TX')
mountain = ('AZ', 'CO', 'NM', 'UT','NV', 'WY', 'ID', 'MT')
pacific = ('AK', 'CA', 'HI','OR','WA')

all_states = new_england+ mid_atlantic+ e_n_central + w_n_central +s_atlantic+ e_s_central+w_s_central+pacific + mountain

regions_dict = {0: new_england, 
          1: mid_atlantic,
          2: e_n_central,
          3: w_n_central,
          4: s_atlantic, 
          5: e_s_central, 
          6: w_s_central,
          7: mountain,
          8: pacific}

regions = ('new_england', 'mid_atlantic', 'e_n_central', 'w_n_central',
          's_atlantic', 'e_s_central', 'w_s_central', 'mountain', 'pacific')

d={}


for i in range(9): 
  for x in regions_dict[i]:
    d[regions[i]]= regions_dict[i] 

#print(d)

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier

df = pd.read_csv('Dropbox/AMLI/final_project_data/cleaneddata.csv', encoding='latin-1')
df = pd.DataFrame(data=df)

#dropped Unnamed: 0 because it has no important information in it
#dropped State, Metro, and County, zipcode
#Keeping City
#dropped median income
if 'zipcode' in df.columns:
  df.drop(columns = ['Unnamed: 0','zipcode','City','Metro', 'County','Estimate; INCOME AND BENEFITS (IN 2017 INFLATION-ADJUSTED DOLLARS) - Total households - Median household income (dollars)'],
                  inplace = True)

# function to return key for any value 
def get_key(val, d): 
	for key, value in d.items(): 
		if val in value: 
			return key 

	return "key doesn't exist"

b = {}
for i in range(9):
  for j in range(len(all_states)):
    if all_states[j] in regions_dict[i]:
      b[all_states[j]] = get_key(all_states[j], regions_dict)
      
      
#print(b)

#categorize the state data into regions

Region = []

for i in range(len(df['State'])):
  Region.append(b[df['State'][i]])

df['region'] = Region

#Region names

region_names =[]
for i in range(len(df['State'])):
  region_names.append(regions[df['region'][i]])

from sklearn.model_selection import train_test_split
remove = ['Estimate; INCOME AND BENEFITS (IN 2017 INFLATION-ADJUSTED DOLLARS) - Total households - Mean household income (dollars)',
         'State']

X_train, X_test, y_train, y_test = train_test_split(df.drop(columns = remove), 
                                                   df['region'],
                                                   test_size = .2, 
                                                   random_state = 42)

ada0 = AdaBoostClassifier(learning_rate = .5)

ada0.fit(X_train, y_train)
score0 = ada0.score(X_test,y_test)

score0

import matplotlib.pyplot as plt
color =['black','pink','purple','blue','green','yellow','orange', 'red', 'cyan']

plt.style.use('ggplot')

plt.hist(df['region'])
plt.show()
plt.figure()
import seaborn as sns

b = sns.countplot(df['region'])

plt.figure()

#This is the plot that I want

ax = sns.countplot(region_names)
ax.axes.set_title("Count of Zip Codes in Region", fontsize=45, pad = 15)
ax.set_xlabel("Region",fontsize=30, labelpad = 30)
ax.set_ylabel("Count of Zip Codes",fontsize=30, labelpad = 30)
ax.tick_params(labelsize=30)
sns.despine()